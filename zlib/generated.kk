// Copyright (c) 2020, the Koka-Community authors. All rights reserved. 
// Use of this source code is governed by a
// MIT-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `ffigen`.

import std/cextern
import std/num/int32
import std/num/int64
import std/num/float64

import std/cextern

extern import
  c { syslib="z" }
extern import
  c header-file "zconf.h"
extern import
  c header-file "zlib.h"

pub extern external/zlibversion(): intptr_t
  c inline "(intptr_t)zlibVersion()"

pub fun wrapper/zlibversion(): c-pointer<int8>
  C-pointer(external/zlibversion())

pub extern external/deflate(^strm: intptr_t, ^flush: int32): int32
  c inline "(int)deflate((struct z_stream_s*)#1, (int)#2)"

pub fun wrapper/deflate(^strm: c-pointer<z-stream-s-c>, ^flush: int): int
  external/deflate(strm.ptr, flush.int32).int

pub extern external/deflateend(^strm: intptr_t): int32
  c inline "(int)deflateEnd((struct z_stream_s*)#1)"

pub fun wrapper/deflateend(^strm: c-pointer<z-stream-s-c>): int
  external/deflateend(strm.ptr).int

pub extern external/inflate(^strm: intptr_t, ^flush: int32): int32
  c inline "(int)inflate((struct z_stream_s*)#1, (int)#2)"

pub fun wrapper/inflate(^strm: c-pointer<z-stream-s-c>, ^flush: int): int
  external/inflate(strm.ptr, flush.int32).int

pub extern external/inflateend(^strm: intptr_t): int32
  c inline "(int)inflateEnd((struct z_stream_s*)#1)"

pub fun wrapper/inflateend(^strm: c-pointer<z-stream-s-c>): int
  external/inflateend(strm.ptr).int

pub extern external/deflatesetdictionary(^strm: intptr_t, ^dictionary: intptr_t, ^dictlength: int32): int32
  c inline "(int)deflateSetDictionary((struct z_stream_s*)#1, (unsigned char*)#2, (unsigned int)#3)"

pub fun wrapper/deflatesetdictionary(^strm: c-pointer<z-stream-s-c>, ^dictionary: c-pointer<int8>, ^dictlength: koka-uint): int
  external/deflatesetdictionary(strm.ptr, dictionary.ptr, dictlength.int32).int

pub extern external/deflategetdictionary(^strm: intptr_t, ^dictionary: intptr_t, ^dictlength: intptr_t): int32
  c inline "(int)deflateGetDictionary((struct z_stream_s*)#1, (unsigned char*)#2, (unsigned int*)#3)"

pub fun wrapper/deflategetdictionary(^strm: c-pointer<z-stream-s-c>, ^dictionary: c-pointer<int8>, ^dictlength: c-pointer<int32>): int
  external/deflategetdictionary(strm.ptr, dictionary.ptr, dictlength.ptr).int

pub extern external/deflatecopy(^dest: intptr_t, ^source: intptr_t): int32
  c inline "(int)deflateCopy((struct z_stream_s*)#1, (struct z_stream_s*)#2)"

pub fun wrapper/deflatecopy(^dest: c-pointer<z-stream-s-c>, ^source: c-pointer<z-stream-s-c>): int
  external/deflatecopy(dest.ptr, source.ptr).int

pub extern external/deflatereset(^strm: intptr_t): int32
  c inline "(int)deflateReset((struct z_stream_s*)#1)"

pub fun wrapper/deflatereset(^strm: c-pointer<z-stream-s-c>): int
  external/deflatereset(strm.ptr).int

pub extern external/deflateparams(^strm: intptr_t, ^level: int32, ^strategy: int32): int32
  c inline "(int)deflateParams((struct z_stream_s*)#1, (int)#2, (int)#3)"

pub fun wrapper/deflateparams(^strm: c-pointer<z-stream-s-c>, ^level: int, ^strategy: int): int
  external/deflateparams(strm.ptr, level.int32, strategy.int32).int

pub extern external/deflatetune(^strm: intptr_t, ^good-length: int32, ^max-lazy: int32, ^nice-length: int32, ^max-chain: int32): int32
  c inline "(int)deflateTune((struct z_stream_s*)#1, (int)#2, (int)#3, (int)#4, (int)#5)"

pub fun wrapper/deflatetune(^strm: c-pointer<z-stream-s-c>, ^good-length: int, ^max-lazy: int, ^nice-length: int, ^max-chain: int): int
  external/deflatetune(strm.ptr, good-length.int32, max-lazy.int32, nice-length.int32, max-chain.int32).int

pub extern external/deflatebound(^strm: intptr_t, ^sourcelen: int64): int64
  c inline "(unsigned long)deflateBound((struct z_stream_s*)#1, (unsigned long)#2)"

pub fun wrapper/deflatebound(^strm: c-pointer<z-stream-s-c>, ^sourcelen: koka-ulong): koka-ulong
  external/deflatebound(strm.ptr, sourcelen.int64).int

pub extern external/deflatepending(^strm: intptr_t, ^pending: intptr_t, ^bits: intptr_t): int32
  c inline "(int)deflatePending((struct z_stream_s*)#1, (unsigned int*)#2, (int*)#3)"

pub fun wrapper/deflatepending(^strm: c-pointer<z-stream-s-c>, ^pending: c-pointer<int32>, ^bits: c-pointer<int32>): int
  external/deflatepending(strm.ptr, pending.ptr, bits.ptr).int

pub extern external/deflateprime(^strm: intptr_t, ^bits: int32, ^value: int32): int32
  c inline "(int)deflatePrime((struct z_stream_s*)#1, (int)#2, (int)#3)"

pub fun wrapper/deflateprime(^strm: c-pointer<z-stream-s-c>, ^bits: int, ^value: int): int
  external/deflateprime(strm.ptr, bits.int32, value.int32).int

pub extern external/deflatesetheader(^strm: intptr_t, ^head: intptr_t): int32
  c inline "(int)deflateSetHeader((struct z_stream_s*)#1, (struct gz_header_s*)#2)"

pub fun wrapper/deflatesetheader(^strm: c-pointer<z-stream-s-c>, ^head: c-pointer<gz-header-s-c>): int
  external/deflatesetheader(strm.ptr, head.ptr).int

pub extern external/inflatesetdictionary(^strm: intptr_t, ^dictionary: intptr_t, ^dictlength: int32): int32
  c inline "(int)inflateSetDictionary((struct z_stream_s*)#1, (unsigned char*)#2, (unsigned int)#3)"

pub fun wrapper/inflatesetdictionary(^strm: c-pointer<z-stream-s-c>, ^dictionary: c-pointer<int8>, ^dictlength: koka-uint): int
  external/inflatesetdictionary(strm.ptr, dictionary.ptr, dictlength.int32).int

pub extern external/inflategetdictionary(^strm: intptr_t, ^dictionary: intptr_t, ^dictlength: intptr_t): int32
  c inline "(int)inflateGetDictionary((struct z_stream_s*)#1, (unsigned char*)#2, (unsigned int*)#3)"

pub fun wrapper/inflategetdictionary(^strm: c-pointer<z-stream-s-c>, ^dictionary: c-pointer<int8>, ^dictlength: c-pointer<int32>): int
  external/inflategetdictionary(strm.ptr, dictionary.ptr, dictlength.ptr).int

pub extern external/inflatesync(^strm: intptr_t): int32
  c inline "(int)inflateSync((struct z_stream_s*)#1)"

pub fun wrapper/inflatesync(^strm: c-pointer<z-stream-s-c>): int
  external/inflatesync(strm.ptr).int

pub extern external/inflatecopy(^dest: intptr_t, ^source: intptr_t): int32
  c inline "(int)inflateCopy((struct z_stream_s*)#1, (struct z_stream_s*)#2)"

pub fun wrapper/inflatecopy(^dest: c-pointer<z-stream-s-c>, ^source: c-pointer<z-stream-s-c>): int
  external/inflatecopy(dest.ptr, source.ptr).int

pub extern external/inflatereset(^strm: intptr_t): int32
  c inline "(int)inflateReset((struct z_stream_s*)#1)"

pub fun wrapper/inflatereset(^strm: c-pointer<z-stream-s-c>): int
  external/inflatereset(strm.ptr).int

pub extern external/inflatereset2(^strm: intptr_t, ^windowbits: int32): int32
  c inline "(int)inflateReset2((struct z_stream_s*)#1, (int)#2)"

pub fun wrapper/inflatereset2(^strm: c-pointer<z-stream-s-c>, ^windowbits: int): int
  external/inflatereset2(strm.ptr, windowbits.int32).int

pub extern external/inflateprime(^strm: intptr_t, ^bits: int32, ^value: int32): int32
  c inline "(int)inflatePrime((struct z_stream_s*)#1, (int)#2, (int)#3)"

pub fun wrapper/inflateprime(^strm: c-pointer<z-stream-s-c>, ^bits: int, ^value: int): int
  external/inflateprime(strm.ptr, bits.int32, value.int32).int

pub extern external/inflatemark(^strm: intptr_t): int64
  c inline "(long)inflateMark((struct z_stream_s*)#1)"

pub fun wrapper/inflatemark(^strm: c-pointer<z-stream-s-c>): int
  external/inflatemark(strm.ptr).int

pub extern external/inflategetheader(^strm: intptr_t, ^head: intptr_t): int32
  c inline "(int)inflateGetHeader((struct z_stream_s*)#1, (struct gz_header_s*)#2)"

pub fun wrapper/inflategetheader(^strm: c-pointer<z-stream-s-c>, ^head: c-pointer<gz-header-s-c>): int
  external/inflategetheader(strm.ptr, head.ptr).int

pub extern external/inflateback(^strm: intptr_t, ^in1: intptr_t, ^in-desc: intptr_t, ^out: intptr_t, ^out-desc: intptr_t): int32
  c inline "(int)inflateBack((struct z_stream_s*)#1, (unsigned int (*)(void*, unsigned char**))#2, (void*)#3, (int (*)(void*, unsigned char*, unsigned int))#4, (void*)#5)"

pub fun wrapper/inflateback(^strm: c-pointer<z-stream-s-c>, ^in1: c-pointer<intptr_t>, ^in-desc: c-pointer<()>, ^out: c-pointer<intptr_t>, ^out-desc: c-pointer<()>): int
  external/inflateback(strm.ptr, in1.ptr, in-desc.ptr, out.ptr, out-desc.ptr).int

pub extern external/inflatebackend(^strm: intptr_t): int32
  c inline "(int)inflateBackEnd((struct z_stream_s*)#1)"

pub fun wrapper/inflatebackend(^strm: c-pointer<z-stream-s-c>): int
  external/inflatebackend(strm.ptr).int

pub extern external/zlibcompileflags(): int64
  c inline "(unsigned long)zlibCompileFlags()"

pub fun wrapper/zlibcompileflags(): koka-ulong
  external/zlibcompileflags().int

pub extern external/compress(^dest: intptr_t, ^destlen: intptr_t, ^source: intptr_t, ^sourcelen: int64): int32
  c inline "(int)compress((unsigned char*)#1, (unsigned long*)#2, (unsigned char*)#3, (unsigned long)#4)"

pub fun wrapper/compress(^dest: c-pointer<int8>, ^destlen: c-pointer<int64>, ^source: c-pointer<int8>, ^sourcelen: koka-ulong): int
  external/compress(dest.ptr, destlen.ptr, source.ptr, sourcelen.int64).int

pub extern external/compress2(^dest: intptr_t, ^destlen: intptr_t, ^source: intptr_t, ^sourcelen: int64, ^level: int32): int32
  c inline "(int)compress2((unsigned char*)#1, (unsigned long*)#2, (unsigned char*)#3, (unsigned long)#4, (int)#5)"

pub fun wrapper/compress2(^dest: c-pointer<int8>, ^destlen: c-pointer<int64>, ^source: c-pointer<int8>, ^sourcelen: koka-ulong, ^level: int): int
  external/compress2(dest.ptr, destlen.ptr, source.ptr, sourcelen.int64, level.int32).int

pub extern external/compressbound(^sourcelen: int64): int64
  c inline "(unsigned long)compressBound((unsigned long)#1)"

pub fun wrapper/compressbound(^sourcelen: koka-ulong): koka-ulong
  external/compressbound(sourcelen.int64).int

pub extern external/uncompress(^dest: intptr_t, ^destlen: intptr_t, ^source: intptr_t, ^sourcelen: int64): int32
  c inline "(int)uncompress((unsigned char*)#1, (unsigned long*)#2, (unsigned char*)#3, (unsigned long)#4)"

pub fun wrapper/uncompress(^dest: c-pointer<int8>, ^destlen: c-pointer<int64>, ^source: c-pointer<int8>, ^sourcelen: koka-ulong): int
  external/uncompress(dest.ptr, destlen.ptr, source.ptr, sourcelen.int64).int

pub extern external/uncompress2(^dest: intptr_t, ^destlen: intptr_t, ^source: intptr_t, ^sourcelen: intptr_t): int32
  c inline "(int)uncompress2((unsigned char*)#1, (unsigned long*)#2, (unsigned char*)#3, (unsigned long*)#4)"

pub fun wrapper/uncompress2(^dest: c-pointer<int8>, ^destlen: c-pointer<int64>, ^source: c-pointer<int8>, ^sourcelen: c-pointer<int64>): int
  external/uncompress2(dest.ptr, destlen.ptr, source.ptr, sourcelen.ptr).int

pub extern external/gzdopen(^fd: int32, ^mode: intptr_t): intptr_t
  c inline "(intptr_t)gzdopen((int)#1, (char*)#2)"

pub fun wrapper/gzdopen(^fd: int, ^mode: c-pointer<int8>): c-pointer<gzfile-s-c>
  C-pointer(external/gzdopen(fd.int32, mode.ptr))

pub extern external/gzbuffer(^file: intptr_t, ^size: int32): int32
  c inline "(int)gzbuffer((struct gzFile_s*)#1, (unsigned int)#2)"

pub fun wrapper/gzbuffer(^file: c-pointer<gzfile-s-c>, ^size: int): int
  external/gzbuffer(file.ptr, size.int32).int

pub extern external/gzsetparams(^file: intptr_t, ^level: int32, ^strategy: int32): int32
  c inline "(int)gzsetparams((struct gzFile_s*)#1, (int)#2, (int)#3)"

pub fun wrapper/gzsetparams(^file: c-pointer<gzfile-s-c>, ^level: int, ^strategy: int): int
  external/gzsetparams(file.ptr, level.int32, strategy.int32).int

pub extern external/gzread(^file: intptr_t, ^buf: intptr_t, ^len: int32): int32
  c inline "(int)gzread((struct gzFile_s*)#1, (void*)#2, (unsigned int)#3)"

pub fun wrapper/gzread(^file: c-pointer<gzfile-s-c>, ^buf: c-pointer<()>, ^len: int): int
  external/gzread(file.ptr, buf.ptr, len.int32).int

pub extern external/gzfread(^buf: intptr_t, ^size: ssize_t, ^nitems: ssize_t, ^file: intptr_t): ssize_t
  c inline "(ssize_t)gzfread((void*)#1, (ssize_t)#2, (ssize_t)#3, (struct gzFile_s*)#4)"

pub fun wrapper/gzfread(^buf: c-pointer<()>, ^size: z-size-t, ^nitems: z-size-t, ^file: c-pointer<gzfile-s-c>): z-size-t
  external/gzfread(buf.ptr, size, nitems, file.ptr)

pub extern external/gzwrite(^file: intptr_t, ^buf: intptr_t, ^len: int32): int32
  c inline "(int)gzwrite((struct gzFile_s*)#1, (void*)#2, (unsigned int)#3)"

pub fun wrapper/gzwrite(^file: c-pointer<gzfile-s-c>, ^buf: c-pointer<()>, ^len: int): int
  external/gzwrite(file.ptr, buf.ptr, len.int32).int

pub extern external/gzfwrite(^buf: intptr_t, ^size: ssize_t, ^nitems: ssize_t, ^file: intptr_t): ssize_t
  c inline "(ssize_t)gzfwrite((void*)#1, (ssize_t)#2, (ssize_t)#3, (struct gzFile_s*)#4)"

pub fun wrapper/gzfwrite(^buf: c-pointer<()>, ^size: z-size-t, ^nitems: z-size-t, ^file: c-pointer<gzfile-s-c>): z-size-t
  external/gzfwrite(buf.ptr, size, nitems, file.ptr)

pub extern external/gzprintf(^file: intptr_t, ^format: intptr_t): int32
  c inline "(int)gzprintf((struct gzFile_s*)#1, (char*)#2)"

pub fun wrapper/gzprintf(^file: c-pointer<gzfile-s-c>, ^format: c-pointer<int8>): int
  external/gzprintf(file.ptr, format.ptr).int

pub extern external/gzputs(^file: intptr_t, ^s: intptr_t): int32
  c inline "(int)gzputs((struct gzFile_s*)#1, (char*)#2)"

pub fun wrapper/gzputs(^file: c-pointer<gzfile-s-c>, ^s: c-pointer<int8>): int
  external/gzputs(file.ptr, s.ptr).int

pub extern external/gzgets(^file: intptr_t, ^buf: intptr_t, ^len: int32): intptr_t
  c inline "(intptr_t)gzgets((struct gzFile_s*)#1, (char*)#2, (int)#3)"

pub fun wrapper/gzgets(^file: c-pointer<gzfile-s-c>, ^buf: c-pointer<int8>, ^len: int): c-pointer<int8>
  C-pointer(external/gzgets(file.ptr, buf.ptr, len.int32))

pub extern external/gzputc(^file: intptr_t, ^c: int32): int32
  c inline "(int)gzputc((struct gzFile_s*)#1, (int)#2)"

pub fun wrapper/gzputc(^file: c-pointer<gzfile-s-c>, ^c: int): int
  external/gzputc(file.ptr, c.int32).int

pub extern external/gzgetc(^file: intptr_t): int32
  c inline "(int)gzgetc((struct gzFile_s*)#1)"

pub fun wrapper/gzgetc(^file: c-pointer<gzfile-s-c>): int
  external/gzgetc(file.ptr).int

pub extern external/gzungetc(^c: int32, ^file: intptr_t): int32
  c inline "(int)gzungetc((int)#1, (struct gzFile_s*)#2)"

pub fun wrapper/gzungetc(^c: int, ^file: c-pointer<gzfile-s-c>): int
  external/gzungetc(c.int32, file.ptr).int

pub extern external/gzflush(^file: intptr_t, ^flush: int32): int32
  c inline "(int)gzflush((struct gzFile_s*)#1, (int)#2)"

pub fun wrapper/gzflush(^file: c-pointer<gzfile-s-c>, ^flush: int): int
  external/gzflush(file.ptr, flush.int32).int

pub extern external/gzrewind(^file: intptr_t): int32
  c inline "(int)gzrewind((struct gzFile_s*)#1)"

pub fun wrapper/gzrewind(^file: c-pointer<gzfile-s-c>): int
  external/gzrewind(file.ptr).int

pub extern external/gzeof(^file: intptr_t): int32
  c inline "(int)gzeof((struct gzFile_s*)#1)"

pub fun wrapper/gzeof(^file: c-pointer<gzfile-s-c>): int
  external/gzeof(file.ptr).int

pub extern external/gzdirect(^file: intptr_t): int32
  c inline "(int)gzdirect((struct gzFile_s*)#1)"

pub fun wrapper/gzdirect(^file: c-pointer<gzfile-s-c>): int
  external/gzdirect(file.ptr).int

pub extern external/gzclose(^file: intptr_t): int32
  c inline "(int)gzclose((struct gzFile_s*)#1)"

pub fun wrapper/gzclose(^file: c-pointer<gzfile-s-c>): int
  external/gzclose(file.ptr).int

pub extern external/gzclose-r(^file: intptr_t): int32
  c inline "(int)gzclose_r((struct gzFile_s*)#1)"

pub fun wrapper/gzclose-r(^file: c-pointer<gzfile-s-c>): int
  external/gzclose-r(file.ptr).int

pub extern external/gzclose-w(^file: intptr_t): int32
  c inline "(int)gzclose_w((struct gzFile_s*)#1)"

pub fun wrapper/gzclose-w(^file: c-pointer<gzfile-s-c>): int
  external/gzclose-w(file.ptr).int

pub extern external/gzerror(^file: intptr_t, ^errnum: intptr_t): intptr_t
  c inline "(intptr_t)gzerror((struct gzFile_s*)#1, (int*)#2)"

pub fun wrapper/gzerror(^file: c-pointer<gzfile-s-c>, ^errnum: c-pointer<int32>): c-pointer<int8>
  C-pointer(external/gzerror(file.ptr, errnum.ptr))

pub extern external/gzclearerr(^file: intptr_t): ()
  c inline "(void)gzclearerr((struct gzFile_s*)#1)"

pub fun wrapper/gzclearerr(^file: c-pointer<gzfile-s-c>): ()
  external/gzclearerr(file.ptr)

pub extern external/adler32(^adler: int64, ^buf: intptr_t, ^len: int32): int64
  c inline "(unsigned long)adler32((unsigned long)#1, (unsigned char*)#2, (unsigned int)#3)"

pub fun wrapper/adler32(^adler: koka-ulong, ^buf: c-pointer<int8>, ^len: koka-uint): koka-ulong
  external/adler32(adler.int64, buf.ptr, len.int32).int

pub extern external/adler32-z(^adler: int64, ^buf: intptr_t, ^len: ssize_t): int64
  c inline "(unsigned long)adler32_z((unsigned long)#1, (unsigned char*)#2, (ssize_t)#3)"

pub fun wrapper/adler32-z(^adler: koka-ulong, ^buf: c-pointer<int8>, ^len: z-size-t): koka-ulong
  external/adler32-z(adler.int64, buf.ptr, len).int

pub extern external/crc32(^crc: int64, ^buf: intptr_t, ^len: int32): int64
  c inline "(unsigned long)crc32((unsigned long)#1, (unsigned char*)#2, (unsigned int)#3)"

pub fun wrapper/crc32(^crc: koka-ulong, ^buf: c-pointer<int8>, ^len: koka-uint): koka-ulong
  external/crc32(crc.int64, buf.ptr, len.int32).int

pub extern external/crc32-z(^adler: int64, ^buf: intptr_t, ^len: ssize_t): int64
  c inline "(unsigned long)crc32_z((unsigned long)#1, (unsigned char*)#2, (ssize_t)#3)"

pub fun wrapper/crc32-z(^adler: koka-ulong, ^buf: c-pointer<int8>, ^len: z-size-t): koka-ulong
  external/crc32-z(adler.int64, buf.ptr, len).int

pub extern external/deflateinit-(^strm: intptr_t, ^level: int32, ^version: intptr_t, ^stream-size: int32): int32
  c inline "(int)deflateInit_((struct z_stream_s*)#1, (int)#2, (char*)#3, (int)#4)"

pub fun wrapper/deflateinit-(^strm: c-pointer<z-stream-s-c>, ^level: int, ^version: c-pointer<int8>, ^stream-size: int): int
  external/deflateinit-(strm.ptr, level.int32, version.ptr, stream-size.int32).int

pub extern external/inflateinit-(^strm: intptr_t, ^version: intptr_t, ^stream-size: int32): int32
  c inline "(int)inflateInit_((struct z_stream_s*)#1, (char*)#2, (int)#3)"

pub fun wrapper/inflateinit-(^strm: c-pointer<z-stream-s-c>, ^version: c-pointer<int8>, ^stream-size: int): int
  external/inflateinit-(strm.ptr, version.ptr, stream-size.int32).int

pub extern external/deflateinit2-(^strm: intptr_t, ^level: int32, ^method: int32, ^windowbits: int32, ^memlevel: int32, ^strategy: int32, ^version: intptr_t, ^stream-size: int32): int32
  c inline "(int)deflateInit2_((struct z_stream_s*)#1, (int)#2, (int)#3, (int)#4, (int)#5, (int)#6, (char*)#7, (int)#8)"

pub fun wrapper/deflateinit2-(^strm: c-pointer<z-stream-s-c>, ^level: int, ^method: int, ^windowbits: int, ^memlevel: int, ^strategy: int, ^version: c-pointer<int8>, ^stream-size: int): int
  external/deflateinit2-(strm.ptr, level.int32, method.int32, windowbits.int32, memlevel.int32, strategy.int32, version.ptr, stream-size.int32).int

pub extern external/inflateinit2-(^strm: intptr_t, ^windowbits: int32, ^version: intptr_t, ^stream-size: int32): int32
  c inline "(int)inflateInit2_((struct z_stream_s*)#1, (int)#2, (char*)#3, (int)#4)"

pub fun wrapper/inflateinit2-(^strm: c-pointer<z-stream-s-c>, ^windowbits: int, ^version: c-pointer<int8>, ^stream-size: int): int
  external/inflateinit2-(strm.ptr, windowbits.int32, version.ptr, stream-size.int32).int

pub extern external/inflatebackinit-(^strm: intptr_t, ^windowbits: int32, ^window: intptr_t, ^version: intptr_t, ^stream-size: int32): int32
  c inline "(int)inflateBackInit_((struct z_stream_s*)#1, (int)#2, (unsigned char*)#3, (char*)#4, (int)#5)"

pub fun wrapper/inflatebackinit-(^strm: c-pointer<z-stream-s-c>, ^windowbits: int, ^window: c-pointer<int8>, ^version: c-pointer<int8>, ^stream-size: int): int
  external/inflatebackinit-(strm.ptr, windowbits.int32, window.ptr, version.ptr, stream-size.int32).int

pub extern external/gzgetc-(^file: intptr_t): int32
  c inline "(int)gzgetc_((struct gzFile_s*)#1)"

pub fun wrapper/gzgetc-(^file: c-pointer<gzfile-s-c>): int
  external/gzgetc-(file.ptr).int

pub extern external/gzopen(^arg0: intptr_t, ^arg1: intptr_t): intptr_t
  c inline "(intptr_t)gzopen((char*)#1, (char*)#2)"

pub fun wrapper/gzopen(^arg0: c-pointer<int8>, ^arg1: c-pointer<int8>): c-pointer<gzfile-s-c>
  C-pointer(external/gzopen(arg0.ptr, arg1.ptr))

pub extern external/gzseek(^arg0: intptr_t, ^arg1: int64, ^arg2: int32): int64
  c inline "(long long)gzseek((struct gzFile_s*)#1, (long long)#2, (int)#3)"

pub fun wrapper/gzseek(^arg0: c-pointer<gzfile-s-c>, ^arg1: koka-off-t, ^arg2: int): koka-off-t
  external/gzseek(arg0.ptr, arg1.int64, arg2.int32).int

pub extern external/gztell(^arg0: intptr_t): int64
  c inline "(long long)gztell((struct gzFile_s*)#1)"

pub fun wrapper/gztell(^arg0: c-pointer<gzfile-s-c>): koka-off-t
  external/gztell(arg0.ptr).int

pub extern external/gzoffset(^arg0: intptr_t): int64
  c inline "(long long)gzoffset((struct gzFile_s*)#1)"

pub fun wrapper/gzoffset(^arg0: c-pointer<gzfile-s-c>): koka-off-t
  external/gzoffset(arg0.ptr).int

pub extern external/adler32-combine(^arg0: int64, ^arg1: int64, ^arg2: int64): int64
  c inline "(unsigned long)adler32_combine((unsigned long)#1, (unsigned long)#2, (long long)#3)"

pub fun wrapper/adler32-combine(^arg0: koka-ulong, ^arg1: koka-ulong, ^arg2: koka-off-t): koka-ulong
  external/adler32-combine(arg0.int64, arg1.int64, arg2.int64).int

pub extern external/crc32-combine(^arg0: int64, ^arg1: int64, ^arg2: int64): int64
  c inline "(unsigned long)crc32_combine((unsigned long)#1, (unsigned long)#2, (long long)#3)"

pub fun wrapper/crc32-combine(^arg0: koka-ulong, ^arg1: koka-ulong, ^arg2: koka-off-t): koka-ulong
  external/crc32-combine(arg0.int64, arg1.int64, arg2.int64).int

pub extern external/zerror(^arg0: int32): intptr_t
  c inline "(intptr_t)zError((int)#1)"

pub fun wrapper/zerror(^arg0: int): c-pointer<int8>
  C-pointer(external/zerror(arg0.int32))

pub extern external/inflatesyncpoint(^arg0: intptr_t): int32
  c inline "(int)inflateSyncPoint((struct z_stream_s*)#1)"

pub fun wrapper/inflatesyncpoint(^arg0: c-pointer<z-stream-s-c>): int
  external/inflatesyncpoint(arg0.ptr).int

pub extern external/get-crc-table(): intptr_t
  c inline "(intptr_t)get_crc_table()"

pub fun wrapper/get-crc-table(): c-pointer<int32>
  C-pointer(external/get-crc-table())

pub extern external/inflateundermine(^arg0: intptr_t, ^arg1: int32): int32
  c inline "(int)inflateUndermine((struct z_stream_s*)#1, (int)#2)"

pub fun wrapper/inflateundermine(^arg0: c-pointer<z-stream-s-c>, ^arg1: int): int
  external/inflateundermine(arg0.ptr, arg1.int32).int

pub extern external/inflatevalidate(^arg0: intptr_t, ^arg1: int32): int32
  c inline "(int)inflateValidate((struct z_stream_s*)#1, (int)#2)"

pub fun wrapper/inflatevalidate(^arg0: c-pointer<z-stream-s-c>, ^arg1: int): int
  external/inflatevalidate(arg0.ptr, arg1.int32).int

pub extern external/inflatecodesused(^arg0: intptr_t): int64
  c inline "(unsigned long)inflateCodesUsed((struct z_stream_s*)#1)"

pub fun wrapper/inflatecodesused(^arg0: c-pointer<z-stream-s-c>): int
  external/inflatecodesused(arg0.ptr).int

pub extern external/inflateresetkeep(^arg0: intptr_t): int32
  c inline "(int)inflateResetKeep((struct z_stream_s*)#1)"

pub fun wrapper/inflateresetkeep(^arg0: c-pointer<z-stream-s-c>): int
  external/inflateresetkeep(arg0.ptr).int

pub extern external/deflateresetkeep(^arg0: intptr_t): int32
  c inline "(int)deflateResetKeep((struct z_stream_s*)#1)"

pub fun wrapper/deflateresetkeep(^arg0: c-pointer<z-stream-s-c>): int
  external/deflateresetkeep(arg0.ptr).int

pub struct internal-state
pub type internal-state-c
pub alias internal-statep = c-pointer<internal-state-c>
pub alias internal-statec = owned-c<internal-state-c>
pub alias internal-statecb<s::S> = borrowed-c<s,internal-state-c>
pub alias internal-stateca = owned-c<c-array<internal-state-c>>

pub struct z-stream-s
  next-in: c-pointer<int8>
  avail-in: koka-uint
  total-in: koka-ulong
  next-out: c-pointer<int8>
  avail-out: koka-uint
  total-out: koka-ulong
  msg: c-pointer<int8>
  state: internal-state
  zalloc: c-pointer<intptr_t>
  zfree: c-pointer<intptr_t>
  opaque: c-pointer<()>
  data-type: int
  adler: koka-ulong
  reserved: koka-ulong

pub type z-stream-s-c
pub alias z-stream-sp = c-pointer<z-stream-s-c>
pub alias z-stream-sc = owned-c<z-stream-s-c>
pub alias z-stream-scb<s::S> = borrowed-c<s,z-stream-s-c>
pub alias z-stream-sca = owned-c<c-array<z-stream-s-c>>

pub extern z-stream-s/size-of(c: c-null<z-stream-s-c>): int32
  c inline "sizeof(struct z_stream_s)"

pub fun z-stream-sc(): z-stream-sc
  malloc(?size-of=z-stream-s/size-of)

pub fun z-stream-sc-calloc(): z-stream-sc
  malloc-c(?size-of=z-stream-s/size-of)

pub fun z-stream-sc-array(n: int): z-stream-sca
  malloc(n.int32, ?size-of=z-stream-s/size-of)

pub fun z-stream-sc-array-calloc(n: int): z-stream-sca
  malloc-c(n.int32, ?size-of=z-stream-s/size-of)

pub inline extern z-stream-s-ptrraw/next-in(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->next_in)"

pub inline fun z-stream-sp/next-in(s: z-stream-sp): c-pointer<int8>
  C-pointer(s.ptr.next-in)

pub inline fun z-stream-sc/next-in(^s: z-stream-sc): c-pointer<int8>
  s.with-ptr(z-stream-sp/next-in)

pub inline fun z-stream-scb/next-in(^s: z-stream-scb<s::S>): c-pointer<int8>
  s.with-ptr(z-stream-sp/next-in)

pub inline extern z-stream-s-ptrraw/set-next-in(s: intptr_t, next-in: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->next_in = (unsigned char*)#2"

pub inline fun z-stream-sp/set-next-in(s: z-stream-sp, next-in: c-pointer<int8>): ()
  s.ptr.set-next-in(next-in.ptr)

pub inline fun z-stream-sc/set-next-in(^s: z-stream-sc, next-in: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-next-in(next-in))

pub inline fun z-stream-scb/set-next-in(^s: z-stream-scb<s::S>, next-in: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-next-in(next-in))

pub inline extern z-stream-s-ptrraw/avail-in(s: intptr_t): int32
  c inline "(unsigned int)(((struct z_stream_s*)#1)->avail_in)"

pub inline fun z-stream-sp/avail-in(s: z-stream-sp): int32
  s.ptr.avail-in

pub inline fun z-stream-sc/avail-in(^s: z-stream-sc): int32
  s.with-ptr(z-stream-sp/avail-in)

pub inline fun z-stream-scb/avail-in(^s: z-stream-scb<s::S>): int32
  s.with-ptr(z-stream-sp/avail-in)

pub inline extern z-stream-s-ptrraw/set-avail-in(s: intptr_t, avail-in: int32): ()
  c inline "((struct z_stream_s*)#1)->avail_in = (unsigned int)#2"

pub inline fun z-stream-sp/set-avail-in(s: z-stream-sp, avail-in: int32): ()
  s.ptr.set-avail-in(avail-in)

pub inline fun z-stream-sc/set-avail-in(^s: z-stream-sc, avail-in: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-in(avail-in))

pub inline fun z-stream-scb/set-avail-in(^s: z-stream-scb<s::S>, avail-in: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-in(avail-in))

pub inline fun z-stream-sc-wrapper/avail-in(^s: z-stream-sc): koka-uint
  s.with-ptr(z-stream-sp/avail-in).int

pub inline fun z-stream-scb-wrapper/avail-in(^s: z-stream-scb<s::S>): koka-uint
  s.with-ptr(z-stream-sp/avail-in).int

pub inline fun z-stream-sc-wrapper/set-avail-in(^s: z-stream-sc, avail-in: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-in(avail-in.int32))

pub inline fun z-stream-scb-wrapper/set-avail-in(^s: z-stream-scb<s::S>, avail-in: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-in(avail-in.int32))

pub inline extern z-stream-s-ptrraw/total-in(s: intptr_t): int64
  c inline "(unsigned long)(((struct z_stream_s*)#1)->total_in)"

pub inline fun z-stream-sp/total-in(s: z-stream-sp): int64
  s.ptr.total-in

pub inline fun z-stream-sc/total-in(^s: z-stream-sc): int64
  s.with-ptr(z-stream-sp/total-in)

pub inline fun z-stream-scb/total-in(^s: z-stream-scb<s::S>): int64
  s.with-ptr(z-stream-sp/total-in)

pub inline extern z-stream-s-ptrraw/set-total-in(s: intptr_t, total-in: int64): ()
  c inline "((struct z_stream_s*)#1)->total_in = (unsigned long)#2"

pub inline fun z-stream-sp/set-total-in(s: z-stream-sp, total-in: int64): ()
  s.ptr.set-total-in(total-in)

pub inline fun z-stream-sc/set-total-in(^s: z-stream-sc, total-in: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-in(total-in))

pub inline fun z-stream-scb/set-total-in(^s: z-stream-scb<s::S>, total-in: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-in(total-in))

pub inline fun z-stream-sc-wrapper/total-in(^s: z-stream-sc): koka-ulong
  s.with-ptr(z-stream-sp/total-in).int

pub inline fun z-stream-scb-wrapper/total-in(^s: z-stream-scb<s::S>): koka-ulong
  s.with-ptr(z-stream-sp/total-in).int

pub inline fun z-stream-sc-wrapper/set-total-in(^s: z-stream-sc, total-in: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-in(total-in.int64))

pub inline fun z-stream-scb-wrapper/set-total-in(^s: z-stream-scb<s::S>, total-in: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-in(total-in.int64))

pub inline extern z-stream-s-ptrraw/next-out(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->next_out)"

pub inline fun z-stream-sp/next-out(s: z-stream-sp): c-pointer<int8>
  C-pointer(s.ptr.next-out)

pub inline fun z-stream-sc/next-out(^s: z-stream-sc): c-pointer<int8>
  s.with-ptr(z-stream-sp/next-out)

pub inline fun z-stream-scb/next-out(^s: z-stream-scb<s::S>): c-pointer<int8>
  s.with-ptr(z-stream-sp/next-out)

pub inline extern z-stream-s-ptrraw/set-next-out(s: intptr_t, next-out: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->next_out = (unsigned char*)#2"

pub inline fun z-stream-sp/set-next-out(s: z-stream-sp, next-out: c-pointer<int8>): ()
  s.ptr.set-next-out(next-out.ptr)

pub inline fun z-stream-sc/set-next-out(^s: z-stream-sc, next-out: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-next-out(next-out))

pub inline fun z-stream-scb/set-next-out(^s: z-stream-scb<s::S>, next-out: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-next-out(next-out))

pub inline extern z-stream-s-ptrraw/avail-out(s: intptr_t): int32
  c inline "(unsigned int)(((struct z_stream_s*)#1)->avail_out)"

pub inline fun z-stream-sp/avail-out(s: z-stream-sp): int32
  s.ptr.avail-out

pub inline fun z-stream-sc/avail-out(^s: z-stream-sc): int32
  s.with-ptr(z-stream-sp/avail-out)

pub inline fun z-stream-scb/avail-out(^s: z-stream-scb<s::S>): int32
  s.with-ptr(z-stream-sp/avail-out)

pub inline extern z-stream-s-ptrraw/set-avail-out(s: intptr_t, avail-out: int32): ()
  c inline "((struct z_stream_s*)#1)->avail_out = (unsigned int)#2"

pub inline fun z-stream-sp/set-avail-out(s: z-stream-sp, avail-out: int32): ()
  s.ptr.set-avail-out(avail-out)

pub inline fun z-stream-sc/set-avail-out(^s: z-stream-sc, avail-out: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-out(avail-out))

pub inline fun z-stream-scb/set-avail-out(^s: z-stream-scb<s::S>, avail-out: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-out(avail-out))

pub inline fun z-stream-sc-wrapper/avail-out(^s: z-stream-sc): koka-uint
  s.with-ptr(z-stream-sp/avail-out).int

pub inline fun z-stream-scb-wrapper/avail-out(^s: z-stream-scb<s::S>): koka-uint
  s.with-ptr(z-stream-sp/avail-out).int

pub inline fun z-stream-sc-wrapper/set-avail-out(^s: z-stream-sc, avail-out: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-out(avail-out.int32))

pub inline fun z-stream-scb-wrapper/set-avail-out(^s: z-stream-scb<s::S>, avail-out: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-avail-out(avail-out.int32))

pub inline extern z-stream-s-ptrraw/total-out(s: intptr_t): int64
  c inline "(unsigned long)(((struct z_stream_s*)#1)->total_out)"

pub inline fun z-stream-sp/total-out(s: z-stream-sp): int64
  s.ptr.total-out

pub inline fun z-stream-sc/total-out(^s: z-stream-sc): int64
  s.with-ptr(z-stream-sp/total-out)

pub inline fun z-stream-scb/total-out(^s: z-stream-scb<s::S>): int64
  s.with-ptr(z-stream-sp/total-out)

pub inline extern z-stream-s-ptrraw/set-total-out(s: intptr_t, total-out: int64): ()
  c inline "((struct z_stream_s*)#1)->total_out = (unsigned long)#2"

pub inline fun z-stream-sp/set-total-out(s: z-stream-sp, total-out: int64): ()
  s.ptr.set-total-out(total-out)

pub inline fun z-stream-sc/set-total-out(^s: z-stream-sc, total-out: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-out(total-out))

pub inline fun z-stream-scb/set-total-out(^s: z-stream-scb<s::S>, total-out: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-out(total-out))

pub inline fun z-stream-sc-wrapper/total-out(^s: z-stream-sc): koka-ulong
  s.with-ptr(z-stream-sp/total-out).int

pub inline fun z-stream-scb-wrapper/total-out(^s: z-stream-scb<s::S>): koka-ulong
  s.with-ptr(z-stream-sp/total-out).int

pub inline fun z-stream-sc-wrapper/set-total-out(^s: z-stream-sc, total-out: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-out(total-out.int64))

pub inline fun z-stream-scb-wrapper/set-total-out(^s: z-stream-scb<s::S>, total-out: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-total-out(total-out.int64))

pub inline extern z-stream-s-ptrraw/msg(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->msg)"

pub inline fun z-stream-sp/msg(s: z-stream-sp): c-pointer<int8>
  C-pointer(s.ptr.msg)

pub inline fun z-stream-sc/msg(^s: z-stream-sc): c-pointer<int8>
  s.with-ptr(z-stream-sp/msg)

pub inline fun z-stream-scb/msg(^s: z-stream-scb<s::S>): c-pointer<int8>
  s.with-ptr(z-stream-sp/msg)

pub inline extern z-stream-s-ptrraw/set-msg(s: intptr_t, msg: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->msg = (char*)#2"

pub inline fun z-stream-sp/set-msg(s: z-stream-sp, msg: c-pointer<int8>): ()
  s.ptr.set-msg(msg.ptr)

pub inline fun z-stream-sc/set-msg(^s: z-stream-sc, msg: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-msg(msg))

pub inline fun z-stream-scb/set-msg(^s: z-stream-scb<s::S>, msg: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-msg(msg))

pub inline extern z-stream-s-ptrraw/state(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->state)"

pub inline fun z-stream-sp/state(s: z-stream-sp): c-pointer<internal-state-c>
  C-pointer(s.ptr.state)

pub inline fun z-stream-sc/state(^s: z-stream-sc): c-pointer<internal-state-c>
  s.with-ptr(z-stream-sp/state)

pub inline fun z-stream-scb/state(^s: z-stream-scb<s::S>): c-pointer<internal-state-c>
  s.with-ptr(z-stream-sp/state)

pub inline extern z-stream-s-ptrraw/set-state(s: intptr_t, state: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->state = (struct internal_state*)#2"

pub inline fun z-stream-sp/set-state(s: z-stream-sp, state: c-pointer<internal-state-c>): ()
  s.ptr.set-state(state.ptr)

pub inline fun z-stream-sc/set-state(^s: z-stream-sc, state: c-pointer<internal-state-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-state(state))

pub inline fun z-stream-scb/set-state(^s: z-stream-scb<s::S>, state: c-pointer<internal-state-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-state(state))

pub inline extern z-stream-s-ptrraw/zalloc(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->zalloc)"

pub inline fun z-stream-sp/zalloc(s: z-stream-sp): c-pointer<intptr_t>
  C-pointer(s.ptr.zalloc)

pub inline fun z-stream-sc/zalloc(^s: z-stream-sc): c-pointer<intptr_t>
  s.with-ptr(z-stream-sp/zalloc)

pub inline fun z-stream-scb/zalloc(^s: z-stream-scb<s::S>): c-pointer<intptr_t>
  s.with-ptr(z-stream-sp/zalloc)

pub inline extern z-stream-s-ptrraw/set-zalloc(s: intptr_t, zalloc: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->zalloc = (void* (*)(void*, unsigned int, unsigned int))#2"

pub inline fun z-stream-sp/set-zalloc(s: z-stream-sp, zalloc: c-pointer<intptr_t>): ()
  s.ptr.set-zalloc(zalloc.ptr)

pub inline fun z-stream-sc/set-zalloc(^s: z-stream-sc, zalloc: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-zalloc(zalloc))

pub inline fun z-stream-scb/set-zalloc(^s: z-stream-scb<s::S>, zalloc: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-zalloc(zalloc))

pub inline extern z-stream-s-ptrraw/zfree(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->zfree)"

pub inline fun z-stream-sp/zfree(s: z-stream-sp): c-pointer<intptr_t>
  C-pointer(s.ptr.zfree)

pub inline fun z-stream-sc/zfree(^s: z-stream-sc): c-pointer<intptr_t>
  s.with-ptr(z-stream-sp/zfree)

pub inline fun z-stream-scb/zfree(^s: z-stream-scb<s::S>): c-pointer<intptr_t>
  s.with-ptr(z-stream-sp/zfree)

pub inline extern z-stream-s-ptrraw/set-zfree(s: intptr_t, zfree: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->zfree = (void (*)(void*, void*))#2"

pub inline fun z-stream-sp/set-zfree(s: z-stream-sp, zfree: c-pointer<intptr_t>): ()
  s.ptr.set-zfree(zfree.ptr)

pub inline fun z-stream-sc/set-zfree(^s: z-stream-sc, zfree: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-zfree(zfree))

pub inline fun z-stream-scb/set-zfree(^s: z-stream-scb<s::S>, zfree: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-zfree(zfree))

pub inline extern z-stream-s-ptrraw/opaque(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct z_stream_s*)#1)->opaque)"

pub inline fun z-stream-sp/opaque(s: z-stream-sp): c-pointer<()>
  C-pointer(s.ptr.opaque)

pub inline fun z-stream-sc/opaque(^s: z-stream-sc): c-pointer<()>
  s.with-ptr(z-stream-sp/opaque)

pub inline fun z-stream-scb/opaque(^s: z-stream-scb<s::S>): c-pointer<()>
  s.with-ptr(z-stream-sp/opaque)

pub inline extern z-stream-s-ptrraw/set-opaque(s: intptr_t, opaque: intptr_t): ()
  c inline "((struct z_stream_s*)#1)->opaque = (void*)#2"

pub inline fun z-stream-sp/set-opaque(s: z-stream-sp, opaque: c-pointer<()>): ()
  s.ptr.set-opaque(opaque.ptr)

pub inline fun z-stream-sc/set-opaque(^s: z-stream-sc, opaque: c-pointer<()>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-opaque(opaque))

pub inline fun z-stream-scb/set-opaque(^s: z-stream-scb<s::S>, opaque: c-pointer<()>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-opaque(opaque))

pub inline extern z-stream-s-ptrraw/data-type(s: intptr_t): int32
  c inline "(int)(((struct z_stream_s*)#1)->data_type)"

pub inline fun z-stream-sp/data-type(s: z-stream-sp): int32
  s.ptr.data-type

pub inline fun z-stream-sc/data-type(^s: z-stream-sc): int32
  s.with-ptr(z-stream-sp/data-type)

pub inline fun z-stream-scb/data-type(^s: z-stream-scb<s::S>): int32
  s.with-ptr(z-stream-sp/data-type)

pub inline extern z-stream-s-ptrraw/set-data-type(s: intptr_t, data-type: int32): ()
  c inline "((struct z_stream_s*)#1)->data_type = (int)#2"

pub inline fun z-stream-sp/set-data-type(s: z-stream-sp, data-type: int32): ()
  s.ptr.set-data-type(data-type)

pub inline fun z-stream-sc/set-data-type(^s: z-stream-sc, data-type: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-data-type(data-type))

pub inline fun z-stream-scb/set-data-type(^s: z-stream-scb<s::S>, data-type: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-data-type(data-type))

pub inline fun z-stream-sc-wrapper/data-type(^s: z-stream-sc): int
  s.with-ptr(z-stream-sp/data-type).int

pub inline fun z-stream-scb-wrapper/data-type(^s: z-stream-scb<s::S>): int
  s.with-ptr(z-stream-sp/data-type).int

pub inline fun z-stream-sc-wrapper/set-data-type(^s: z-stream-sc, data-type: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-data-type(data-type.int32))

pub inline fun z-stream-scb-wrapper/set-data-type(^s: z-stream-scb<s::S>, data-type: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-data-type(data-type.int32))

pub inline extern z-stream-s-ptrraw/adler(s: intptr_t): int64
  c inline "(unsigned long)(((struct z_stream_s*)#1)->adler)"

pub inline fun z-stream-sp/adler(s: z-stream-sp): int64
  s.ptr.adler

pub inline fun z-stream-sc/adler(^s: z-stream-sc): int64
  s.with-ptr(z-stream-sp/adler)

pub inline fun z-stream-scb/adler(^s: z-stream-scb<s::S>): int64
  s.with-ptr(z-stream-sp/adler)

pub inline extern z-stream-s-ptrraw/set-adler(s: intptr_t, adler: int64): ()
  c inline "((struct z_stream_s*)#1)->adler = (unsigned long)#2"

pub inline fun z-stream-sp/set-adler(s: z-stream-sp, adler: int64): ()
  s.ptr.set-adler(adler)

pub inline fun z-stream-sc/set-adler(^s: z-stream-sc, adler: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-adler(adler))

pub inline fun z-stream-scb/set-adler(^s: z-stream-scb<s::S>, adler: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-adler(adler))

pub inline fun z-stream-sc-wrapper/adler(^s: z-stream-sc): koka-ulong
  s.with-ptr(z-stream-sp/adler).int

pub inline fun z-stream-scb-wrapper/adler(^s: z-stream-scb<s::S>): koka-ulong
  s.with-ptr(z-stream-sp/adler).int

pub inline fun z-stream-sc-wrapper/set-adler(^s: z-stream-sc, adler: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-adler(adler.int64))

pub inline fun z-stream-scb-wrapper/set-adler(^s: z-stream-scb<s::S>, adler: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-adler(adler.int64))

pub inline extern z-stream-s-ptrraw/reserved(s: intptr_t): int64
  c inline "(unsigned long)(((struct z_stream_s*)#1)->reserved)"

pub inline fun z-stream-sp/reserved(s: z-stream-sp): int64
  s.ptr.reserved

pub inline fun z-stream-sc/reserved(^s: z-stream-sc): int64
  s.with-ptr(z-stream-sp/reserved)

pub inline fun z-stream-scb/reserved(^s: z-stream-scb<s::S>): int64
  s.with-ptr(z-stream-sp/reserved)

pub inline extern z-stream-s-ptrraw/set-reserved(s: intptr_t, reserved: int64): ()
  c inline "((struct z_stream_s*)#1)->reserved = (unsigned long)#2"

pub inline fun z-stream-sp/set-reserved(s: z-stream-sp, reserved: int64): ()
  s.ptr.set-reserved(reserved)

pub inline fun z-stream-sc/set-reserved(^s: z-stream-sc, reserved: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-reserved(reserved))

pub inline fun z-stream-scb/set-reserved(^s: z-stream-scb<s::S>, reserved: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-reserved(reserved))

pub inline fun z-stream-sc-wrapper/reserved(^s: z-stream-sc): koka-ulong
  s.with-ptr(z-stream-sp/reserved).int

pub inline fun z-stream-scb-wrapper/reserved(^s: z-stream-scb<s::S>): koka-ulong
  s.with-ptr(z-stream-sp/reserved).int

pub inline fun z-stream-sc-wrapper/set-reserved(^s: z-stream-sc, reserved: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-reserved(reserved.int64))

pub inline fun z-stream-scb-wrapper/set-reserved(^s: z-stream-scb<s::S>, reserved: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.z-stream-sp/set-reserved(reserved.int64))

alias bytef = int8
alias byte = int8
alias koka-byte = int
alias uint = int32
alias koka-uint = int
alias ulong = int64
alias koka-ulong = int
alias alloc-func = c-pointer<intptr_t>
alias alloc-funcfn = ((opaque : c-pointer<()>, items : int32, size : int32) -> c-pointer<()>)
alias koka-alloc-funcfn = ((opaque : c-pointer<()>, items : koka-uint, size : koka-uint) -> c-pointer<()>)
alias voidpf = c-pointer<()>
alias free-func = c-pointer<intptr_t>
alias free-funcfn = ((opaque : c-pointer<()>, address : c-pointer<()>) -> ())
pub struct gz-header-s
  text: int
  time: koka-ulong
  xflags: int
  os: int
  extra: c-pointer<int8>
  extra-len: koka-uint
  extra-max: koka-uint
  name: c-pointer<int8>
  name-max: koka-uint
  comment: c-pointer<int8>
  comm-max: koka-uint
  hcrc: int
  done: int

pub type gz-header-s-c
pub alias gz-header-sp = c-pointer<gz-header-s-c>
pub alias gz-header-sc = owned-c<gz-header-s-c>
pub alias gz-header-scb<s::S> = borrowed-c<s,gz-header-s-c>
pub alias gz-header-sca = owned-c<c-array<gz-header-s-c>>

pub extern gz-header-s/size-of(c: c-null<gz-header-s-c>): int32
  c inline "sizeof(struct gz_header_s)"

pub fun gz-header-sc(): gz-header-sc
  malloc(?size-of=gz-header-s/size-of)

pub fun gz-header-sc-calloc(): gz-header-sc
  malloc-c(?size-of=gz-header-s/size-of)

pub fun gz-header-sc-array(n: int): gz-header-sca
  malloc(n.int32, ?size-of=gz-header-s/size-of)

pub fun gz-header-sc-array-calloc(n: int): gz-header-sca
  malloc-c(n.int32, ?size-of=gz-header-s/size-of)

pub inline extern gz-header-s-ptrraw/text(s: intptr_t): int32
  c inline "(int)(((struct gz_header_s*)#1)->text)"

pub inline fun gz-header-sp/text(s: gz-header-sp): int32
  s.ptr.text

pub inline fun gz-header-sc/text(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/text)

pub inline fun gz-header-scb/text(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/text)

pub inline extern gz-header-s-ptrraw/set-text(s: intptr_t, text: int32): ()
  c inline "((struct gz_header_s*)#1)->text = (int)#2"

pub inline fun gz-header-sp/set-text(s: gz-header-sp, text: int32): ()
  s.ptr.set-text(text)

pub inline fun gz-header-sc/set-text(^s: gz-header-sc, text: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-text(text))

pub inline fun gz-header-scb/set-text(^s: gz-header-scb<s::S>, text: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-text(text))

pub inline fun gz-header-sc-wrapper/text(^s: gz-header-sc): int
  s.with-ptr(gz-header-sp/text).int

pub inline fun gz-header-scb-wrapper/text(^s: gz-header-scb<s::S>): int
  s.with-ptr(gz-header-sp/text).int

pub inline fun gz-header-sc-wrapper/set-text(^s: gz-header-sc, text: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-text(text.int32))

pub inline fun gz-header-scb-wrapper/set-text(^s: gz-header-scb<s::S>, text: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-text(text.int32))

pub inline extern gz-header-s-ptrraw/time(s: intptr_t): int64
  c inline "(unsigned long)(((struct gz_header_s*)#1)->time)"

pub inline fun gz-header-sp/time(s: gz-header-sp): int64
  s.ptr.time

pub inline fun gz-header-sc/time(^s: gz-header-sc): int64
  s.with-ptr(gz-header-sp/time)

pub inline fun gz-header-scb/time(^s: gz-header-scb<s::S>): int64
  s.with-ptr(gz-header-sp/time)

pub inline extern gz-header-s-ptrraw/set-time(s: intptr_t, time: int64): ()
  c inline "((struct gz_header_s*)#1)->time = (unsigned long)#2"

pub inline fun gz-header-sp/set-time(s: gz-header-sp, time: int64): ()
  s.ptr.set-time(time)

pub inline fun gz-header-sc/set-time(^s: gz-header-sc, time: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-time(time))

pub inline fun gz-header-scb/set-time(^s: gz-header-scb<s::S>, time: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-time(time))

pub inline fun gz-header-sc-wrapper/time(^s: gz-header-sc): koka-ulong
  s.with-ptr(gz-header-sp/time).int

pub inline fun gz-header-scb-wrapper/time(^s: gz-header-scb<s::S>): koka-ulong
  s.with-ptr(gz-header-sp/time).int

pub inline fun gz-header-sc-wrapper/set-time(^s: gz-header-sc, time: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-time(time.int64))

pub inline fun gz-header-scb-wrapper/set-time(^s: gz-header-scb<s::S>, time: koka-ulong): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-time(time.int64))

pub inline extern gz-header-s-ptrraw/xflags(s: intptr_t): int32
  c inline "(int)(((struct gz_header_s*)#1)->xflags)"

pub inline fun gz-header-sp/xflags(s: gz-header-sp): int32
  s.ptr.xflags

pub inline fun gz-header-sc/xflags(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/xflags)

pub inline fun gz-header-scb/xflags(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/xflags)

pub inline extern gz-header-s-ptrraw/set-xflags(s: intptr_t, xflags: int32): ()
  c inline "((struct gz_header_s*)#1)->xflags = (int)#2"

pub inline fun gz-header-sp/set-xflags(s: gz-header-sp, xflags: int32): ()
  s.ptr.set-xflags(xflags)

pub inline fun gz-header-sc/set-xflags(^s: gz-header-sc, xflags: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-xflags(xflags))

pub inline fun gz-header-scb/set-xflags(^s: gz-header-scb<s::S>, xflags: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-xflags(xflags))

pub inline fun gz-header-sc-wrapper/xflags(^s: gz-header-sc): int
  s.with-ptr(gz-header-sp/xflags).int

pub inline fun gz-header-scb-wrapper/xflags(^s: gz-header-scb<s::S>): int
  s.with-ptr(gz-header-sp/xflags).int

pub inline fun gz-header-sc-wrapper/set-xflags(^s: gz-header-sc, xflags: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-xflags(xflags.int32))

pub inline fun gz-header-scb-wrapper/set-xflags(^s: gz-header-scb<s::S>, xflags: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-xflags(xflags.int32))

pub inline extern gz-header-s-ptrraw/os(s: intptr_t): int32
  c inline "(int)(((struct gz_header_s*)#1)->os)"

pub inline fun gz-header-sp/os(s: gz-header-sp): int32
  s.ptr.os

pub inline fun gz-header-sc/os(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/os)

pub inline fun gz-header-scb/os(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/os)

pub inline extern gz-header-s-ptrraw/set-os(s: intptr_t, os: int32): ()
  c inline "((struct gz_header_s*)#1)->os = (int)#2"

pub inline fun gz-header-sp/set-os(s: gz-header-sp, os: int32): ()
  s.ptr.set-os(os)

pub inline fun gz-header-sc/set-os(^s: gz-header-sc, os: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-os(os))

pub inline fun gz-header-scb/set-os(^s: gz-header-scb<s::S>, os: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-os(os))

pub inline fun gz-header-sc-wrapper/os(^s: gz-header-sc): int
  s.with-ptr(gz-header-sp/os).int

pub inline fun gz-header-scb-wrapper/os(^s: gz-header-scb<s::S>): int
  s.with-ptr(gz-header-sp/os).int

pub inline fun gz-header-sc-wrapper/set-os(^s: gz-header-sc, os: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-os(os.int32))

pub inline fun gz-header-scb-wrapper/set-os(^s: gz-header-scb<s::S>, os: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-os(os.int32))

pub inline extern gz-header-s-ptrraw/extra(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct gz_header_s*)#1)->extra)"

pub inline fun gz-header-sp/extra(s: gz-header-sp): c-pointer<int8>
  C-pointer(s.ptr.extra)

pub inline fun gz-header-sc/extra(^s: gz-header-sc): c-pointer<int8>
  s.with-ptr(gz-header-sp/extra)

pub inline fun gz-header-scb/extra(^s: gz-header-scb<s::S>): c-pointer<int8>
  s.with-ptr(gz-header-sp/extra)

pub inline extern gz-header-s-ptrraw/set-extra(s: intptr_t, extra: intptr_t): ()
  c inline "((struct gz_header_s*)#1)->extra = (unsigned char*)#2"

pub inline fun gz-header-sp/set-extra(s: gz-header-sp, extra: c-pointer<int8>): ()
  s.ptr.set-extra(extra.ptr)

pub inline fun gz-header-sc/set-extra(^s: gz-header-sc, extra: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra(extra))

pub inline fun gz-header-scb/set-extra(^s: gz-header-scb<s::S>, extra: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra(extra))

pub inline extern gz-header-s-ptrraw/extra-len(s: intptr_t): int32
  c inline "(unsigned int)(((struct gz_header_s*)#1)->extra_len)"

pub inline fun gz-header-sp/extra-len(s: gz-header-sp): int32
  s.ptr.extra-len

pub inline fun gz-header-sc/extra-len(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/extra-len)

pub inline fun gz-header-scb/extra-len(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/extra-len)

pub inline extern gz-header-s-ptrraw/set-extra-len(s: intptr_t, extra-len: int32): ()
  c inline "((struct gz_header_s*)#1)->extra_len = (unsigned int)#2"

pub inline fun gz-header-sp/set-extra-len(s: gz-header-sp, extra-len: int32): ()
  s.ptr.set-extra-len(extra-len)

pub inline fun gz-header-sc/set-extra-len(^s: gz-header-sc, extra-len: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-len(extra-len))

pub inline fun gz-header-scb/set-extra-len(^s: gz-header-scb<s::S>, extra-len: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-len(extra-len))

pub inline fun gz-header-sc-wrapper/extra-len(^s: gz-header-sc): koka-uint
  s.with-ptr(gz-header-sp/extra-len).int

pub inline fun gz-header-scb-wrapper/extra-len(^s: gz-header-scb<s::S>): koka-uint
  s.with-ptr(gz-header-sp/extra-len).int

pub inline fun gz-header-sc-wrapper/set-extra-len(^s: gz-header-sc, extra-len: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-len(extra-len.int32))

pub inline fun gz-header-scb-wrapper/set-extra-len(^s: gz-header-scb<s::S>, extra-len: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-len(extra-len.int32))

pub inline extern gz-header-s-ptrraw/extra-max(s: intptr_t): int32
  c inline "(unsigned int)(((struct gz_header_s*)#1)->extra_max)"

pub inline fun gz-header-sp/extra-max(s: gz-header-sp): int32
  s.ptr.extra-max

pub inline fun gz-header-sc/extra-max(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/extra-max)

pub inline fun gz-header-scb/extra-max(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/extra-max)

pub inline extern gz-header-s-ptrraw/set-extra-max(s: intptr_t, extra-max: int32): ()
  c inline "((struct gz_header_s*)#1)->extra_max = (unsigned int)#2"

pub inline fun gz-header-sp/set-extra-max(s: gz-header-sp, extra-max: int32): ()
  s.ptr.set-extra-max(extra-max)

pub inline fun gz-header-sc/set-extra-max(^s: gz-header-sc, extra-max: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-max(extra-max))

pub inline fun gz-header-scb/set-extra-max(^s: gz-header-scb<s::S>, extra-max: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-max(extra-max))

pub inline fun gz-header-sc-wrapper/extra-max(^s: gz-header-sc): koka-uint
  s.with-ptr(gz-header-sp/extra-max).int

pub inline fun gz-header-scb-wrapper/extra-max(^s: gz-header-scb<s::S>): koka-uint
  s.with-ptr(gz-header-sp/extra-max).int

pub inline fun gz-header-sc-wrapper/set-extra-max(^s: gz-header-sc, extra-max: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-max(extra-max.int32))

pub inline fun gz-header-scb-wrapper/set-extra-max(^s: gz-header-scb<s::S>, extra-max: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-extra-max(extra-max.int32))

pub inline extern gz-header-s-ptrraw/name(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct gz_header_s*)#1)->name)"

pub inline fun gz-header-sp/name(s: gz-header-sp): c-pointer<int8>
  C-pointer(s.ptr.name)

pub inline fun gz-header-sc/name(^s: gz-header-sc): c-pointer<int8>
  s.with-ptr(gz-header-sp/name)

pub inline fun gz-header-scb/name(^s: gz-header-scb<s::S>): c-pointer<int8>
  s.with-ptr(gz-header-sp/name)

pub inline extern gz-header-s-ptrraw/set-name(s: intptr_t, name: intptr_t): ()
  c inline "((struct gz_header_s*)#1)->name = (unsigned char*)#2"

pub inline fun gz-header-sp/set-name(s: gz-header-sp, name: c-pointer<int8>): ()
  s.ptr.set-name(name.ptr)

pub inline fun gz-header-sc/set-name(^s: gz-header-sc, name: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-name(name))

pub inline fun gz-header-scb/set-name(^s: gz-header-scb<s::S>, name: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-name(name))

pub inline extern gz-header-s-ptrraw/name-max(s: intptr_t): int32
  c inline "(unsigned int)(((struct gz_header_s*)#1)->name_max)"

pub inline fun gz-header-sp/name-max(s: gz-header-sp): int32
  s.ptr.name-max

pub inline fun gz-header-sc/name-max(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/name-max)

pub inline fun gz-header-scb/name-max(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/name-max)

pub inline extern gz-header-s-ptrraw/set-name-max(s: intptr_t, name-max: int32): ()
  c inline "((struct gz_header_s*)#1)->name_max = (unsigned int)#2"

pub inline fun gz-header-sp/set-name-max(s: gz-header-sp, name-max: int32): ()
  s.ptr.set-name-max(name-max)

pub inline fun gz-header-sc/set-name-max(^s: gz-header-sc, name-max: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-name-max(name-max))

pub inline fun gz-header-scb/set-name-max(^s: gz-header-scb<s::S>, name-max: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-name-max(name-max))

pub inline fun gz-header-sc-wrapper/name-max(^s: gz-header-sc): koka-uint
  s.with-ptr(gz-header-sp/name-max).int

pub inline fun gz-header-scb-wrapper/name-max(^s: gz-header-scb<s::S>): koka-uint
  s.with-ptr(gz-header-sp/name-max).int

pub inline fun gz-header-sc-wrapper/set-name-max(^s: gz-header-sc, name-max: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-name-max(name-max.int32))

pub inline fun gz-header-scb-wrapper/set-name-max(^s: gz-header-scb<s::S>, name-max: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-name-max(name-max.int32))

pub inline extern gz-header-s-ptrraw/comment(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct gz_header_s*)#1)->comment)"

pub inline fun gz-header-sp/comment(s: gz-header-sp): c-pointer<int8>
  C-pointer(s.ptr.comment)

pub inline fun gz-header-sc/comment(^s: gz-header-sc): c-pointer<int8>
  s.with-ptr(gz-header-sp/comment)

pub inline fun gz-header-scb/comment(^s: gz-header-scb<s::S>): c-pointer<int8>
  s.with-ptr(gz-header-sp/comment)

pub inline extern gz-header-s-ptrraw/set-comment(s: intptr_t, comment: intptr_t): ()
  c inline "((struct gz_header_s*)#1)->comment = (unsigned char*)#2"

pub inline fun gz-header-sp/set-comment(s: gz-header-sp, comment: c-pointer<int8>): ()
  s.ptr.set-comment(comment.ptr)

pub inline fun gz-header-sc/set-comment(^s: gz-header-sc, comment: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-comment(comment))

pub inline fun gz-header-scb/set-comment(^s: gz-header-scb<s::S>, comment: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-comment(comment))

pub inline extern gz-header-s-ptrraw/comm-max(s: intptr_t): int32
  c inline "(unsigned int)(((struct gz_header_s*)#1)->comm_max)"

pub inline fun gz-header-sp/comm-max(s: gz-header-sp): int32
  s.ptr.comm-max

pub inline fun gz-header-sc/comm-max(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/comm-max)

pub inline fun gz-header-scb/comm-max(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/comm-max)

pub inline extern gz-header-s-ptrraw/set-comm-max(s: intptr_t, comm-max: int32): ()
  c inline "((struct gz_header_s*)#1)->comm_max = (unsigned int)#2"

pub inline fun gz-header-sp/set-comm-max(s: gz-header-sp, comm-max: int32): ()
  s.ptr.set-comm-max(comm-max)

pub inline fun gz-header-sc/set-comm-max(^s: gz-header-sc, comm-max: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-comm-max(comm-max))

pub inline fun gz-header-scb/set-comm-max(^s: gz-header-scb<s::S>, comm-max: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-comm-max(comm-max))

pub inline fun gz-header-sc-wrapper/comm-max(^s: gz-header-sc): koka-uint
  s.with-ptr(gz-header-sp/comm-max).int

pub inline fun gz-header-scb-wrapper/comm-max(^s: gz-header-scb<s::S>): koka-uint
  s.with-ptr(gz-header-sp/comm-max).int

pub inline fun gz-header-sc-wrapper/set-comm-max(^s: gz-header-sc, comm-max: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-comm-max(comm-max.int32))

pub inline fun gz-header-scb-wrapper/set-comm-max(^s: gz-header-scb<s::S>, comm-max: koka-uint): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-comm-max(comm-max.int32))

pub inline extern gz-header-s-ptrraw/hcrc(s: intptr_t): int32
  c inline "(int)(((struct gz_header_s*)#1)->hcrc)"

pub inline fun gz-header-sp/hcrc(s: gz-header-sp): int32
  s.ptr.hcrc

pub inline fun gz-header-sc/hcrc(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/hcrc)

pub inline fun gz-header-scb/hcrc(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/hcrc)

pub inline extern gz-header-s-ptrraw/set-hcrc(s: intptr_t, hcrc: int32): ()
  c inline "((struct gz_header_s*)#1)->hcrc = (int)#2"

pub inline fun gz-header-sp/set-hcrc(s: gz-header-sp, hcrc: int32): ()
  s.ptr.set-hcrc(hcrc)

pub inline fun gz-header-sc/set-hcrc(^s: gz-header-sc, hcrc: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-hcrc(hcrc))

pub inline fun gz-header-scb/set-hcrc(^s: gz-header-scb<s::S>, hcrc: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-hcrc(hcrc))

pub inline fun gz-header-sc-wrapper/hcrc(^s: gz-header-sc): int
  s.with-ptr(gz-header-sp/hcrc).int

pub inline fun gz-header-scb-wrapper/hcrc(^s: gz-header-scb<s::S>): int
  s.with-ptr(gz-header-sp/hcrc).int

pub inline fun gz-header-sc-wrapper/set-hcrc(^s: gz-header-sc, hcrc: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-hcrc(hcrc.int32))

pub inline fun gz-header-scb-wrapper/set-hcrc(^s: gz-header-scb<s::S>, hcrc: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-hcrc(hcrc.int32))

pub inline extern gz-header-s-ptrraw/done(s: intptr_t): int32
  c inline "(int)(((struct gz_header_s*)#1)->done)"

pub inline fun gz-header-sp/done(s: gz-header-sp): int32
  s.ptr.done

pub inline fun gz-header-sc/done(^s: gz-header-sc): int32
  s.with-ptr(gz-header-sp/done)

pub inline fun gz-header-scb/done(^s: gz-header-scb<s::S>): int32
  s.with-ptr(gz-header-sp/done)

pub inline extern gz-header-s-ptrraw/set-done(s: intptr_t, done: int32): ()
  c inline "((struct gz_header_s*)#1)->done = (int)#2"

pub inline fun gz-header-sp/set-done(s: gz-header-sp, done: int32): ()
  s.ptr.set-done(done)

pub inline fun gz-header-sc/set-done(^s: gz-header-sc, done: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-done(done))

pub inline fun gz-header-scb/set-done(^s: gz-header-scb<s::S>, done: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-done(done))

pub inline fun gz-header-sc-wrapper/done(^s: gz-header-sc): int
  s.with-ptr(gz-header-sp/done).int

pub inline fun gz-header-scb-wrapper/done(^s: gz-header-scb<s::S>): int
  s.with-ptr(gz-header-sp/done).int

pub inline fun gz-header-sc-wrapper/set-done(^s: gz-header-sc, done: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-done(done.int32))

pub inline fun gz-header-scb-wrapper/set-done(^s: gz-header-scb<s::S>, done: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gz-header-sp/set-done(done.int32))

alias z-streamp = c-pointer<z-stream-s-c>
alias z-stream = z-stream-s-c
alias koka-z-stream = z-stream-s
alias gz-headerp = c-pointer<gz-header-s-c>
alias gz-header = gz-header-s-c
alias koka-gz-header = gz-header-s
alias in-func = c-pointer<intptr_t>
alias in-funcfn = ((c-pointer<()>, c-pointer<c-pointer<int8>>) -> int32)
alias koka-in-funcfn = ((c-pointer<()>, c-pointer<c-pointer<int8>>) -> int)
alias out-func = c-pointer<intptr_t>
alias out-funcfn = ((c-pointer<()>, c-pointer<int8>, int32) -> int32)
alias koka-out-funcfn = ((c-pointer<()>, c-pointer<int8>, int) -> int)
alias ulongf = int64
pub value struct gzfile-s
  have: int
  next: c-pointer<int8>
  pos: koka-off-t

pub type gzfile-s-c
pub alias gzfile-sp = c-pointer<gzfile-s-c>
pub alias gzfile-sc = owned-c<gzfile-s-c>
pub alias gzfile-scb<s::S> = borrowed-c<s,gzfile-s-c>
pub alias gzfile-sca = owned-c<c-array<gzfile-s-c>>

pub extern gzfile-s/size-of(c: c-null<gzfile-s-c>): int32
  c inline "sizeof(struct gzFile_s)"

pub fun gzfile-sc(): gzfile-sc
  malloc(?size-of=gzfile-s/size-of)

pub fun gzfile-sc-calloc(): gzfile-sc
  malloc-c(?size-of=gzfile-s/size-of)

pub fun gzfile-sc-array(n: int): gzfile-sca
  malloc(n.int32, ?size-of=gzfile-s/size-of)

pub fun gzfile-sc-array-calloc(n: int): gzfile-sca
  malloc-c(n.int32, ?size-of=gzfile-s/size-of)

pub inline extern gzfile-s-ptrraw/have(s: intptr_t): int32
  c inline "(unsigned int)(((struct gzFile_s*)#1)->have)"

pub inline fun gzfile-sp/have(s: gzfile-sp): int32
  s.ptr.have

pub inline fun gzfile-sc/have(^s: gzfile-sc): int32
  s.with-ptr(gzfile-sp/have)

pub inline fun gzfile-scb/have(^s: gzfile-scb<s::S>): int32
  s.with-ptr(gzfile-sp/have)

pub inline extern gzfile-s-ptrraw/set-have(s: intptr_t, have: int32): ()
  c inline "((struct gzFile_s*)#1)->have = (unsigned int)#2"

pub inline fun gzfile-sp/set-have(s: gzfile-sp, have: int32): ()
  s.ptr.set-have(have)

pub inline fun gzfile-sc/set-have(^s: gzfile-sc, have: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-have(have))

pub inline fun gzfile-scb/set-have(^s: gzfile-scb<s::S>, have: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-have(have))

pub inline fun gzfile-sc-wrapper/have(^s: gzfile-sc): int
  s.with-ptr(gzfile-sp/have).int

pub inline fun gzfile-scb-wrapper/have(^s: gzfile-scb<s::S>): int
  s.with-ptr(gzfile-sp/have).int

pub inline fun gzfile-sc-wrapper/set-have(^s: gzfile-sc, have: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-have(have.int32))

pub inline fun gzfile-scb-wrapper/set-have(^s: gzfile-scb<s::S>, have: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-have(have.int32))

pub inline extern gzfile-s-ptrraw/next(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct gzFile_s*)#1)->next)"

pub inline fun gzfile-sp/next(s: gzfile-sp): c-pointer<int8>
  C-pointer(s.ptr.next)

pub inline fun gzfile-sc/next(^s: gzfile-sc): c-pointer<int8>
  s.with-ptr(gzfile-sp/next)

pub inline fun gzfile-scb/next(^s: gzfile-scb<s::S>): c-pointer<int8>
  s.with-ptr(gzfile-sp/next)

pub inline extern gzfile-s-ptrraw/set-next(s: intptr_t, next: intptr_t): ()
  c inline "((struct gzFile_s*)#1)->next = (unsigned char*)#2"

pub inline fun gzfile-sp/set-next(s: gzfile-sp, next: c-pointer<int8>): ()
  s.ptr.set-next(next.ptr)

pub inline fun gzfile-sc/set-next(^s: gzfile-sc, next: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-next(next))

pub inline fun gzfile-scb/set-next(^s: gzfile-scb<s::S>, next: c-pointer<int8>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-next(next))

pub inline extern gzfile-s-ptrraw/pos(s: intptr_t): int64
  c inline "(long long)(((struct gzFile_s*)#1)->pos)"

pub inline fun gzfile-sp/pos(s: gzfile-sp): int64
  s.ptr.pos

pub inline fun gzfile-sc/pos(^s: gzfile-sc): int64
  s.with-ptr(gzfile-sp/pos)

pub inline fun gzfile-scb/pos(^s: gzfile-scb<s::S>): int64
  s.with-ptr(gzfile-sp/pos)

pub inline extern gzfile-s-ptrraw/set-pos(s: intptr_t, pos: int64): ()
  c inline "((struct gzFile_s*)#1)->pos = (long long)#2"

pub inline fun gzfile-sp/set-pos(s: gzfile-sp, pos: int64): ()
  s.ptr.set-pos(pos)

pub inline fun gzfile-sc/set-pos(^s: gzfile-sc, pos: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-pos(pos))

pub inline fun gzfile-scb/set-pos(^s: gzfile-scb<s::S>, pos: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-pos(pos))

pub inline fun gzfile-sc-wrapper/pos(^s: gzfile-sc): koka-off-t
  s.with-ptr(gzfile-sp/pos).int

pub inline fun gzfile-scb-wrapper/pos(^s: gzfile-scb<s::S>): koka-off-t
  s.with-ptr(gzfile-sp/pos).int

pub inline fun gzfile-sc-wrapper/set-pos(^s: gzfile-sc, pos: koka-off-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-pos(pos.int64))

pub inline fun gzfile-scb-wrapper/set-pos(^s: gzfile-scb<s::S>, pos: koka-off-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.gzfile-sp/set-pos(pos.int64))

alias off-t = int64
alias koka-off-t = int
alias gzfile = c-pointer<gzfile-s-c>
alias voidp = c-pointer<()>
alias z-size-t = ssize_t
alias voidpc = c-pointer<()>
alias z-crc-t = int32
alias koka-z-crc-t = int
